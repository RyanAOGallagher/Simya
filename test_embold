const fs = require('fs');
const csv = require('csvtojson');
const { exec } = require('child_process');
const { exit } = require('process');
const { addFile, commitStagedChanges, push, pull } = require('./GitHelper');
const fetch = require('node-fetch');

const parsedData = [];
const appsToUpdate = {};
const filesToPush = [];
const successApps = [];
const failedApps = [];
let locale = '';
let locales = [];
let apps = [];

const asyncForEach = async (array = [], asyncFunction = async () => {}) => {
  for (let i = 0; i < array.length; i++) {
    const index = i;
    const element = array[i];
    await asyncFunction(element, index);
  }
};

const execAsync = command =>
  new Promise((resolve, reject) => {
    exec(command, { cwd: '../..' }, (error, stdout, stderr) => {
      if (error) {
        reject(stderr);
      } else {
        resolve(stdout);
      }
    });
  });

const main = async metadata => {
  const csvData = await csv({ delimiter: '\t' }).fromFile(
    `../metadata/${metadata}_update.csv`
  );

  for (value in csvData) {
    parsedData.push(Object.entries(csvData[value]));
  }

  for (let i = 0; i < parsedData.length; i++) {
    for (let j = 0; j < parsedData[i].length; j++) {
      if (parsedData[i][j][0] === 'locale') {
        locale = parsedData[i][j][1];
      } else if (parsedData[i][j][1] !== '') {
        const app = parsedData[i][j][0];
        fs.writeFileSync(
          `${app}/${locale}/${metadata}.txt`,
          `${parsedData[i][j][1]}`
        );
        filesToPush.push(`${app}/${locale}/${metadata}.txt`);
        if (!apps.includes(app) || apps.length === 0) {
          locales = [];
          locales.push(locale);
          apps.push(app);
        } else {
          locales.push(locale);
        }
        appsToUpdate[app] = locales;
      }
    }
  }

  try {
    await asyncForEach(filesToPush, file => addFile(file));
    await commitStagedChanges(`Update ${metadata} via slack command`);
    await pull();
    await push();
  } catch (error) {
    console.error(error);
  }

  for (const [build, value] of Object.entries(appsToUpdate)) {
    try {
      console.log(`\x1b[34mAttempting App:${build}\x1b[0m`);
      const result = await execAsync(
        `bundle exec fastlane android upload_listing skipScreenshots:true build:${build} locales:${[
          value
        ].join(',')}`
      );
      console.log(result);
      successApps.push(build);
    } catch (error) {
      console.log(`\x1b[31mError with ${build} app: ${error}\x1b[0m`);
      failedApps.push({ [build]: error });
    }
  }
  let res = `Update ${metadata} result:\n${
    successApps.length !== 0
      ? 'Successful Apps :white_check_mark:\n '
      : 'All apps failed!'
  }${successApps}${
    failedApps.length !== 0 ? '\nFailed Apps :x:\n' : '\nAll apps succeeded!'
  }`;

  for (let j = 0; j < failedApps.length; j++) {
    for (key in failedApps[j]) {
      res += key + ': ' + failedApps[j][key];
    }
  }

  res = res.replace(
    /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,
    ''
  );

  try {
    await fetch(
      `https://us-central1-simya-slack-bot-q2x4t.cloudfunctions.net/postMessage?channel=party-last-week&message=${res}`,
      {
        method: 'POST'
      }
    );
  } catch (error) {
    console.error(error);
  }
};

(async () => {
  const mode = process.argv.slice(2); //title, subtitle, short_description, full_description
  await main(mode);
  exit(0);
})();
